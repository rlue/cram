#!/usr/bin/env ruby
# frozen_string_literal: true

# Handle shell errors (Ctrl+C / broken pipes) ----------------------------------
# borrowed from https://github.com/chocolateboy/cli-pasta
Signal.trap('INT', 'SYSTEM_DEFAULT') if Signal.list.include?('INT')
Signal.trap('PIPE', 'SYSTEM_DEFAULT') if Signal.list.include?('PIPE')

# Parse opts -------------------------------------------------------------------

require 'optparse'

parser = OptionParser.new do |opts|
  opts.banner = <<~BANNER
    Usage: cram append:zh-compounds [<options>] <file>
    For each line of a given input CSV,
    take the Chinese character in the first field
    and append common compound words it appears in as a new field
    (or an empty string, if no word is found).

    With no <file> (or when <file> is -), read standard input.

    Supports Traditional Chinese characters only.
    Word list adapted from https://www.tw.org/tocfl/.

  BANNER

  opts.on(
    '-d=DELIMITER', '--delimiter=DELIMITER',
    'specify the CSV column separator (default: ,)'
  )

  opts.on(
    '--[no-]strict',
    'abort on unexpected input (default: on)',
    '(--no-strict: append an empty field)'
  )

  opts.on(
    '-H', '--omit-headword',
    'omit headword from results',
    "(e.g., ～題字 vs. 標題字)"
  )
end

begin
  params = { delimiter: ',', strict: true }
  parser.parse!(into: params)
rescue OptionParser::ParseError => e
  warn(e.message)
  warn(parser.help)
  exit 1
end

# Core logic -------------------------------------------------------------------

require 'pathname'
require 'yaml'
require 'csv'

DATA_DIR = Pathname.new(__dir__).join('../../../share/cram').freeze
WORDS = YAML.safe_load(File.read(DATA_DIR.join('zh/tw/compound-words.yml'))).freeze

CSV.filter(col_sep: params[:delimiter]) do |row|
  raise "unexpected value: #{row.first}" if params[:strict] && !row.first.match?(/^\p{Han}$/)

  row << WORDS.select { |word| word.include?(row.first) }
              .then { |matches| matches.take(3).join('、') }

  if row[-1].empty?
    row[-1] = nil
  elsif params[:"omit-headword"]
    row[-1] = row[-1].tr(row.first, '～')
  end
rescue => e
  # no-op if e.message !~ /@ rb_sysopen -/
  warn(e.message.split(' @ rb_sysopen - ').reverse.join(': '))
  exit 1
end
