#!/usr/bin/env ruby
# frozen_string_literal: true

# Handle shell errors (Ctrl+C / broken pipes) ----------------------------------
# borrowed from https://github.com/chocolateboy/cli-pasta
Signal.trap('INT', 'SYSTEM_DEFAULT') if Signal.list.include?('INT')
Signal.trap('PIPE', 'SYSTEM_DEFAULT') if Signal.list.include?('PIPE')

# Parse opts -------------------------------------------------------------------

require 'optparse'

parser = OptionParser.new do |opts|
  opts.banner = <<~BANNER
    Usage: cram append:zh-audio-char-hint [<options>] <file>
    For each line of a given input CSV,
    take the Chinese character in the first field
    and append an audio snippet of its context in a compound word
    (e.g., for Ë§á, append üîä„ÄåË§áË©ûÁöÑË§á„Äç).
    Use the character alone if no compound word is found.

    With no <file> (or when <file> is -), read standard input.

    Requires:

      * the Google Cloud SDK
        <https://cloud.google.com/sdk/docs/install>
      * a Google Cloud project using the Text-to-Speech API
        <https://cloud.google.com/text-to-speech/>

    Supports Traditional Chinese characters only.
    Word list adapted from https://www.tw.org/tocfl/.

  BANNER

  opts.on(
    '-d=DELIMITER', '--delimiter=DELIMITER',
    'specify the CSV column separator (default: ,)'
  )

  opts.on(
    '--[no-]strict',
    'abort on unexpected input (default: on)',
    '(--no-strict: append an empty field)'
  )

  opts.on(
    '-m=PATH', '--media-dir=PATH',
    "the path to Anki's collection.media/ directory (required)",
  )
end

begin
  params = { delimiter: ',', strict: true }
  parser.parse!(into: params)

  raise('--media-dir option is required') if !params[:'media-dir']
  raise("#{params[:'media-dir']}: invalid directory") if !File.directory?(params[:'media-dir'])
  raise("#{params[:'media-dir']}: permission denied") if !File.writable?(params[:'media-dir'])
rescue OptionParser::ParseError => e
  warn(e.message)
  warn(parser.help)
  exit 1
rescue => e
  warn(e.message)
  exit 1
end

# Verify dependencies ----------------------------------------------------------

require 'open3'

GCLOUD_ACCESS_TOKEN, err, status = Open3.capture3(<<~CMD)
  gcloud auth application-default print-access-token
CMD

if !status.success?
  warn(err)
  exit status.exitstatus
end

# Core logic -------------------------------------------------------------------

require 'csv'
require 'yaml'
require 'pathname'
require 'net/http'
require 'json'
require 'base64'

DATA_DIR = Pathname.new(__dir__).join('../../../share/cram').freeze
WORDS = YAML.safe_load(File.read(DATA_DIR.join('zh/tw/compound-words.yml'))).freeze

API_REQUEST = Net::HTTP.new('texttospeech.googleapis.com', 443)
  .tap { |https| https.use_ssl = true }

API_REQUEST_HEADERS = {
  'Authorization': "Bearer #{GCLOUD_ACCESS_TOKEN}",
  'Content-Type': 'text/json'
}.freeze

API_REQUEST_BODY = <<~TEMPLATE.freeze
  {
    "input":{
      "text":"%s"
    },
    "voice":{
      "languageCode":"cmn-TW",
      "name":"cmn-TW-Wavenet-A",
      "ssmlGender":"FEMALE"
    },
    "audioConfig":{
      "audioEncoding":"MP3"
    }
  }
TEMPLATE

CSV.filter(col_sep: params[:delimiter]) do |row|
  raise "unexpected value: #{row.first}" if params[:strict] && !row.first.match?(/^\p{Han}$/)

  snippet = WORDS.find { |word| word.include?(row.first) }
                 &.then { |match| "#{match}ÁöÑ#{row.first}" }

  snippet ||= row.first

  output_file = Pathname.new(params[:'media-dir']).join("zh-char-hint_#{row.first}.mp3")

  row << "[sound:#{File.basename(output_file)}]"

  API_REQUEST
    .post('/v1/text:synthesize',
          API_REQUEST_BODY % snippet,
          API_REQUEST_HEADERS).body
    .then(&JSON.method(:parse))['audioContent']
    .then(&Base64.method(:strict_decode64))
    .then { |mp3| File.binwrite(output_file, mp3) }
rescue => e
  # no-op if e.message !~ /@ rb_sysopen -/
  warn(e.message.split(' @ rb_sysopen - ').reverse.join(': '))
  exit 1
end
