#!/usr/bin/env ruby
# frozen_string_literal: true

# Handle shell errors (Ctrl+C / broken pipes) ----------------------------------
# borrowed from https://github.com/chocolateboy/cli-pasta
Signal.trap('INT', 'SYSTEM_DEFAULT') if Signal.list.include?('INT')
Signal.trap('PIPE', 'SYSTEM_DEFAULT') if Signal.list.include?('PIPE')

# Parse opts -------------------------------------------------------------------

require 'optparse'

parser = OptionParser.new do |opts|
  opts.banner = <<~BANNER
    Usage: cram use <profile> <file>
    Execute a pipeline of cram commands
    stored as a "profile" in cram's config file.

    With no <file> (or when <file> is -), read standard input.

    For example, to invoke the following pipeline:

        $ cram extract:zh --ignore=~/notes/zh-chars.csv <file> \\
          | cram append:zhuyin --no-strict \\
          | cram append:cangjie \\
          | cram append:zh-compounds \\
          >> ~/notes/chinese-characters.csv

    define and use the ``zh-literacy'' profile below:

        profiles:
          zh-literacy:
            extract:zh:
              ignore: ~/notes/zh-chars.csv
            append:zhuyin:
              strict: false
            append:cangjie:
            append:zh-compounds:
            output:
              path: ~/notes/chinese-characters.csv
              append: true

    Store cram's config file under $XDG_CONFIG_HOME/cram.yml
    ($XDG_CONFIG_HOME defaults to ~/.config/).
  BANNER
end

begin
  parser.parse!
rescue OptionParser::ParseError => e
  warn(e.message)
  warn(parser.help)
  exit 1
end

PROFILE = ARGV.shift.freeze

if PROFILE.nil?
  warn('no profile specified')
  warn(parser.help)
  exit 1
end

# Core logic -------------------------------------------------------------------

require 'yaml'
require 'open3'

def hash_to_command_line(command, options)
  ['cram', command].concat(
    (options || {}).map do |name, value|

      case value
      when true
        "--#{name}"
      when false
        "--no-#{name}"
      when String
        # FIXME: not every option value is a filepath. Could this assumption break things?
        value = File.expand_path(value)

        "--#{name}=#{value}"
      when Array
        # FIXME: not every option value is a filepath. Could this assumption break things?
        value = value.map(&File.method(:expand_path))

        "--#{name}=#{value.join(',')}"
      end
    end
  ).join(' ')
end

CONFIG_FILE = [ENV['XDG_CONFIG_HOME'], "#{Dir.home}/.config"]
  .compact
  .map { |d| "#{d}/cram.yml" }
  .find(&File.method(:file?))
  .freeze

pipeline = begin
             YAML.safe_load_file(CONFIG_FILE)
               .dig('profiles', PROFILE)
               .tap { |p| raise "#{CONFIG_FILE}: config format invalid" unless p.is_a?(Hash) }
           rescue TypeError
             raise 'no config file found'
           rescue NoMethodError
             raise "#{CONFIG_FILE}: config format invalid"
           rescue => e
             # no-op if e.message !~ /@ rb_sysopen -/
             warn(e.message.split(' @ rb_sysopen - ').reverse.join(': '))
             exit 1
           end

stdout = pipeline.delete('output').then do |output|
           case output
           when String
             File.expand_path(output)
           when Hash
             output['append'] \
               ? [File.expand_path(output['path']), 'a']
               : File.expand_path(output['path'])
           else
             STDOUT
           end
         end

begin
  Open3.pipeline(
    *pipeline.map(&method(:hash_to_command_line)),
    in: ARGF,
    out: stdout
  )
rescue => e
  warn(e.message)
  exit 1
end
