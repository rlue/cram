#!/usr/bin/env ruby
# frozen_string_literal: true

# Handle shell errors (Ctrl+C / broken pipes) ----------------------------------
# borrowed from https://github.com/chocolateboy/cli-pasta
Signal.trap('INT', 'SYSTEM_DEFAULT') if Signal.list.include?('INT')
Signal.trap('PIPE', 'SYSTEM_DEFAULT') if Signal.list.include?('PIPE')

# Parse opts/args --------------------------------------------------------------

require 'optparse'
require 'pathname'

COMMAND_LOAD_PATH = []
  .push(Pathname.new(Dir.home).join('.local'))
  .push(Pathname.new(__dir__).join('..'))
  .map { |path| path.join('lib', 'cram') }
  .select(&File.method(:directory?))
  .freeze

installed_commands = COMMAND_LOAD_PATH
  .map do |lib|
    Dir[lib.join('**', '*')]
      .select(&File.method(:file?))
      .map { |entries| entries.delete_prefix("#{lib}/") }
  end
  .flatten
  .map { |command_path| command_path.tr('/', ':') }
  .uniq
  .sort

parser = OptionParser.new do |opts|
  opts.version = '0.0.4'
  opts.banner  = <<~BANNER
    Usage: cram [-v | --version] [-h | --help] command [<args>]

    #{['Commands:', *installed_commands].join("\n    ")}

    Use ``cram <command> --help'' to learn more about each command.
  BANNER
end

begin
  parser.order!
  command = ARGV.shift

  raise OptionParser::ParseError.new('no command given') if command.nil?
rescue => e
  warn(e.message)
  warn(parser.help) if e.is_a?(OptionParser::ParseError)
  exit 1
end

# Run command ------------------------------------------------------------------

require 'pathname'

COMMAND_LOAD_PATH
  .map { |d| d.join(*command.split(':')) }
  .find { |f| File.file?(f) && File.executable?(f) }
  &.then { |resolved_command| system(resolved_command.to_s, *ARGV) }
  &.then { exit 0 }

warn("#{parser.program_name}: '#{command}' is not a #{parser.program_name} command.")
exit 1
